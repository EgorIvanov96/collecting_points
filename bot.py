import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
# from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, StateFilter
from sqlalchemy.future import select
# from sqlalchemy.ext.asyncio import AsyncSession
# from sqlalchemy import select
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.exc import IntegrityError
# from aiogram.dispatcher import FSM


from dotenv import load_dotenv, find_dotenv

from common.bot_commond import private
# from database.engine import create_db

load_dotenv(find_dotenv())

from database.engine import create_db, SessionLocal
from database.models import User, Point

bot = Bot(token=os.getenv('BOT_TOKEN'))

storage = MemoryStorage()
dp = Dispatcher(storage=storage, bot=bot)


class Form(StatesGroup):
    first_name = State()
    last_name = State()
    subject = State()
    score = State()


"""@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã
–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã –ï–ì–≠.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /login –¥–ª—è –≤—Ö–æ–¥–∞.
–ö–æ–º–∞–Ω–¥–∞ /enter_scores: –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã –ï–ì–≠.
–ö–æ–º–∞–Ω–¥–∞ /view_scores: –≤—ã–≤–æ–¥–∏—Ç —Ç–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã.
        ''')"""


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /enter_scores –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç.")


@dp.message(Command('register'))
async def cmd_register(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Form.first_name)


@dp.message(StateFilter(Form.first_name))
async def process_first_name(message: types.Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data['first_name'] = message.text  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Form.last_name)


@dp.message(StateFilter(Form.last_name))
async def process_last_name(message: types.Message, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data['last_name'] = message.text  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    first_name = data['first_name']  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    last_name = data['last_name']

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with SessionLocal() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        async with session.begin():  # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            user = User(first_name=first_name, last_name=last_name)
            session.add(user)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
        await session.commit()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    await state.set_state(None)


@dp.message(Command('enter_scores'))
async def cmd_enter_scores(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    await state.set_state(Form.subject)


@dp.message(StateFilter(Form.subject))
async def process_subject(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(subject=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:")
    await state.set_state(Form.score)


@dp.message(StateFilter(Form.score))
async def process_score(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º score
    await state.update_data(score=message.text)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è subject –∏ score
    subject = data.get('subject')
    score = message.text  # –ú—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ score –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_first_name = data.get('first_name')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    async with SessionLocal() as session:
        async with session.begin():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º select –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(User).filter(User.first_name == user_first_name))
            user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            if user:
                point = Point(subject=subject, point=score, user_id=user.id)
                session.add(point)
                await session.commit()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç
                await message.answer("–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.set_state(None)


@dp.message(Command('view_scores'))
async def cmd_view_scores(message: types.Message):
    user_first_name = '–í–≤–µ–¥–∏—Ç–µ_–≤–∞—à–µ_–∏–º—è'  # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–±, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with SessionLocal() as session:
        async with session.begin():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º select –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(User).filter(User.first_name == user_first_name))
            user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            if user:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                scores_result = await session.execute(select(Point).filter(Point.user_id == user.id))
                scores = scores_result.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–ª–ª—ã

                if scores:
                    response = "\n".join([f"{score.subject}: {score.point} –±–∞–ª–ª–æ–≤" for score in scores])
                    await message.answer(f"–í–∞—à–∏ –±–∞–ª–ª—ã:\n{response}")
                else:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤.")
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def on_startup(bot):

    await create_db()


async def main():
    dp.startup.register(on_startup)
    await bot.set_my_commands(commands=private,
                              scope=types.BotCommandScopeAllPrivateChats())
    # await bot.delete_my_commands(scope=types.BotCommandScopeAllPrivateChats())
    await dp.start_polling(bot)


asyncio.run(main())
