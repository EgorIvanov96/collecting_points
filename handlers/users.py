from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from sqlalchemy.future import select

from database.engine import SessionLocal
from database.models import User, Point


user_router = Router()


class Form(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_scores = State()
    waiting_for_subject = State()


@user_router.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start."""

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!ü§ö\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /enter_scores –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–ª–æ–≤.")


@user_router.message(Command('register'))
async def register_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""

    await state.set_state(Form.waiting_for_first_name.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@user_router.message(StateFilter(Form.waiting_for_first_name))
async def process_first_name(message: types.Message, state: FSMContext):
    first_name = message.text
    await state.update_data(first_name=first_name)
    await state.set_state(Form.waiting_for_last_name.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")


@user_router.message(StateFilter(Form.waiting_for_last_name))
async def process_last_name(message: types.Message, state: FSMContext):
    last_name = message.text
    user_data = await state.get_data()
    first_name = user_data.get('first_name')
    telegram_user_id = message.from_user.id

    async with SessionLocal() as session:
        new_user = User(
            id=telegram_user_id,
            first_name=first_name,
            last_name=last_name)
        session.add(new_user)
        await session.commit()

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    await state.clear()


@user_router.message(Command('enter_scores'))
async def enter_scores_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º."""

    await state.set_state(Form.waiting_for_subject.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:")


@user_router.message(StateFilter(Form.waiting_for_subject))
async def process_subject(message: types.Message, state: FSMContext):
    subject = message.text
    await state.update_data(subject=subject)
    await state.set_state(Form.waiting_for_scores.state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ï–ì–≠:")


@user_router.message(StateFilter(Form.waiting_for_scores))
async def process_scores(message: types.Message, state: FSMContext):
    scores = message.text
    user_data = await state.get_data()
    subject = user_data.get('subject')

    async with SessionLocal() as session:
        user_id = message.from_user.id
        user = await session.execute(select(User).where(User.id == user_id))
        user = user.scalars().first()

        if user:
            new_point = Point(
                subject=subject,
                point=int(scores),
                user_id=user.id)
            session.add(new_point)
            await session.commit()
            await message.answer("–í–∞—à–∏ –±–∞–ª–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
                )

    await state.clear()


@user_router.message(Command('view_scores'))
async def view_scores_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤."""

    async with SessionLocal() as session:
        user_id = message.from_user.id
        user = await session.execute(select(User).where(User.id == user_id))
        user = user.scalars().first()

        if user:
            points = await session.execute(
                select(Point).where(Point.user_id == user.id)
                )
            points = points.scalars().all()
            if points:
                scores_message = "\n".join(
                    [f"{point.subject}: {point.point}" for point in points]
                    )
                await message.answer(f"–í–∞—à–∏ –±–∞–ª–ª—ã:\n{scores_message}")
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤.")
        else:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
                )
